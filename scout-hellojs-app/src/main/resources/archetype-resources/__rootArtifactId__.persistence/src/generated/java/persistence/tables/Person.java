#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
/*
 * This file is generated by jOOQ.
 */
package ${package}.persistence.tables;


import java.util.function.Function;

import ${package}.persistence.Keys;
import ${package}.persistence.Schema;
import ${package}.persistence.tables.records.PersonRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Person extends TableImpl<PersonRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>Schema.person</code>
   */
  public static final Person PERSON = new Person();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<PersonRecord> getRecordType() {
    return PersonRecord.class;
  }

  /**
   * The column <code>Schema.person.person_id</code>.
   */
  public final TableField<PersonRecord, String> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.person.first_name</code>.
   */
  public final TableField<PersonRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(200), this, "");

  /**
   * The column <code>Schema.person.last_name</code>.
   */
  public final TableField<PersonRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

  /**
   * The column <code>Schema.person.salary</code>.
   */
  public final TableField<PersonRecord, Integer> SALARY = createField(DSL.name("salary"), SQLDataType.INTEGER, this, "");

  /**
   * The column <code>Schema.person.external</code>.
   */
  public final TableField<PersonRecord, Boolean> EXTERNAL = createField(DSL.name("external"), SQLDataType.BOOLEAN, this, "");

  private Person(Name alias, Table<PersonRecord> aliased) {
    this(alias, aliased, null);
  }

  private Person(Name alias, Table<PersonRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>Schema.person</code> table reference
   */
  public Person(String alias) {
    this(DSL.name(alias), PERSON);
  }

  /**
   * Create an aliased <code>Schema.person</code> table reference
   */
  public Person(Name alias) {
    this(alias, PERSON);
  }

  /**
   * Create a <code>Schema.person</code> table reference
   */
  public Person() {
    this(DSL.name("person"), null);
  }

  public <O extends Record> Person(Table<O> child, ForeignKey<O, PersonRecord> key) {
    super(child, key, PERSON);
  }

  @Override
  public org.jooq.Schema getSchema() {
    return aliased() ? null : Schema.SCHEMA;
  }

  @Override
  public UniqueKey<PersonRecord> getPrimaryKey() {
    return Keys.PERSON_PK;
  }

  @Override
  public Person as(String alias) {
    return new Person(DSL.name(alias), this);
  }

  @Override
  public Person as(Name alias) {
    return new Person(alias, this);
  }

  @Override
  public Person as(Table<?> alias) {
    return new Person(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public Person rename(String name) {
    return new Person(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Person rename(Name name) {
    return new Person(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public Person rename(Table<?> name) {
    return new Person(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<String, String, String, Integer, Boolean> fieldsRow() {
    return (Row5) super.fieldsRow();
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
    return convertFrom(Records.mapping(from));
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class,Function)}.
   */
  public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
