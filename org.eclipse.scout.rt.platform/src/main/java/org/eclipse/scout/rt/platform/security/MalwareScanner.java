/*
 * Copyright (c) 2010-2022 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 */
package org.eclipse.scout.rt.platform.security;

import org.eclipse.scout.rt.platform.ApplicationScoped;
import org.eclipse.scout.rt.platform.BEANS;
import org.eclipse.scout.rt.platform.Bean;
import org.eclipse.scout.rt.platform.config.PlatformConfigProperties.MalwareScannerPathProperty;
import org.eclipse.scout.rt.platform.exception.PlatformException;
import org.eclipse.scout.rt.platform.resource.BinaryResource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Facility used to scan files and resources for malware.
 * <p>
 * This default scanner assumes that an appropriate malware scanner is in place and scans a special folder using a
 * realtime filesystem scan strategy. Malware should therefore immediately be removed or blocked by the malware
 * implementation.
 * <p>
 * Override this {@link Bean} in order to implement another scanning strategy.
 *
 * @since 5.2
 */
@ApplicationScoped
public class MalwareScanner {
  private static final Logger LOG = LoggerFactory.getLogger(MalwareScanner.class);

  /**
   * This {@link MalwareScanner} copies the resource to be scanned into a special folder (specified by
   * {@link MalwareScannerPathProperty}), reads it back in and verifies the equality of the two streams.
   * <p>
   * Override this {@link Bean} in order to implement another scanning strategy.
   *
   * @throws PlatformException
   *           if the resource is valid and the scanner did not find any issues
   * @since 10.x
   */
  public void scan(BinaryResource res) {
    BEANS.get(IMalwareScannerImplementor.class).scan(res);
  }

  /**
   * @deprecated Use {@link FileSystemMalwareScannerImplementor#throwUnsafeResource(BinaryResource)} instead
   */
  @Deprecated // TODO [23.0] remove this method, should not be called anymore it is just kept to keep existing api
  protected void throwUnsafeResource(BinaryResource res) {
    LOG.info("detected unsafe resource '{}'", res.getFilename());
    throw new UnsafeResourceException("Resource '{}' is not safe", res.getFilename());
  }
}
